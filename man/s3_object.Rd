% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s3.R
\name{s3_object}
\alias{s3_object}
\title{R6 Class Wrapper for Metaflow S3Object}
\description{
R6 Class Wrapper for Metaflow S3Object

R6 Class Wrapper for Metaflow S3Object
}
\details{
This class represents an S3 object returned by the s3_client.
}
\note{
This is a read-only property. It cannot be set directly.
}
\examples{

## ------------------------------------------------
## Method `s3_object$convert_bool`
## ------------------------------------------------

s3obj$convert_bool(TRUE)  # Returns TRUE
s3obj$convert_bool(get_py_false())  # Returns FALSE
s3obj$convert_bool(NULL)  # Returns FALSE
\dontrun{
s3obj$convert_bool("not a boolean")  # Throws an error
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{py_obj}}{Python S3Object}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-s3_object-convert_bool}{\code{s3_object$convert_bool()}}
\item \href{#method-s3_object-new}{\code{s3_object$new()}}
\item \href{#method-s3_object-url}{\code{s3_object$url()}}
\item \href{#method-s3_object-text}{\code{s3_object$text()}}
\item \href{#method-s3_object-size}{\code{s3_object$size()}}
\item \href{#method-s3_object-exists}{\code{s3_object$exists()}}
\item \href{#method-s3_object-downloaded}{\code{s3_object$downloaded()}}
\item \href{#method-s3_object-path}{\code{s3_object$path()}}
\item \href{#method-s3_object-blob}{\code{s3_object$blob()}}
\item \href{#method-s3_object-content_type}{\code{s3_object$content_type()}}
\item \href{#method-s3_object-metadata}{\code{s3_object$metadata()}}
\item \href{#method-s3_object-last_modified}{\code{s3_object$last_modified()}}
\item \href{#method-s3_object-prefix}{\code{s3_object$prefix()}}
\item \href{#method-s3_object-key}{\code{s3_object$key()}}
\item \href{#method-s3_object-has_info}{\code{s3_object$has_info()}}
\item \href{#method-s3_object-encryption}{\code{s3_object$encryption()}}
\item \href{#method-s3_object-range_info}{\code{s3_object$range_info()}}
\item \href{#method-s3_object-clone}{\code{s3_object$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-convert_bool"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-convert_bool}{}}}
\subsection{Method \code{convert_bool()}}{
Convert a value to a boolean, handling both R logical and Python boolean objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$convert_bool(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{The value to convert}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A logical value
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{s3obj$convert_bool(TRUE)  # Returns TRUE
s3obj$convert_bool(get_py_false())  # Returns FALSE
s3obj$convert_bool(NULL)  # Returns FALSE
\dontrun{
s3obj$convert_bool("not a boolean")  # Throws an error
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-new"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-new}{}}}
\subsection{Method \code{new()}}{
Create a new S3Object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$new(py_obj)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{py_obj}}{Python S3Object}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-url"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-url}{}}}
\subsection{Method \code{url()}}{
Get the URL of the S3 object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$url()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
URL as a string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-text"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-text}{}}}
\subsection{Method \code{text()}}{
Get the content of the S3 object as text
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$text()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Content as a string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-size"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-size}{}}}
\subsection{Method \code{size()}}{
Get the size of the S3 object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$size()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Size in bytes
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-exists"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-exists}{}}}
\subsection{Method \code{exists()}}{
Check if the object exists in S3
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$exists()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Boolean indicating existence
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-downloaded"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-downloaded}{}}}
\subsection{Method \code{downloaded()}}{
Check if the object has been downloaded
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$downloaded()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Boolean indicating if downloaded
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-path"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-path}{}}}
\subsection{Method \code{path()}}{
Get the local path of the downloaded object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$path()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Local path as a string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-blob"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-blob}{}}}
\subsection{Method \code{blob()}}{
Get the content of the S3 object as a byte string
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$blob()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Content as raw bytes
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-content_type"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-content_type}{}}}
\subsection{Method \code{content_type()}}{
Get the content type of the S3 object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$content_type()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Content type as a string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-metadata"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-metadata}{}}}
\subsection{Method \code{metadata()}}{
Get the metadata of the S3 object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$metadata()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Metadata as a list
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-last_modified"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-last_modified}{}}}
\subsection{Method \code{last_modified()}}{
Get the last modified timestamp of the S3 object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$last_modified()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Last modified timestamp as a POSIXct object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-prefix"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-prefix}{}}}
\subsection{Method \code{prefix()}}{
Get the prefix requested that matches this object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$prefix()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Prefix as a string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-key"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-key}{}}}
\subsection{Method \code{key()}}{
Get the key corresponding to the get call that produced this object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$key()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Key as a string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-has_info"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-has_info}{}}}
\subsection{Method \code{has_info()}}{
Check if this S3Object contains additional metadata
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$has_info()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Boolean indicating if additional metadata is available
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-encryption"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-encryption}{}}}
\subsection{Method \code{encryption()}}{
Get the encryption type of the S3 object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$encryption()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Encryption type as a string or NULL if not defined
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-range_info"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-range_info}{}}}
\subsection{Method \code{range_info()}}{
Get information about a partially downloaded object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$range_info()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list with total_size, request_offset, and request_length, or NULL if not applicable
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-s3_object-clone"></a>}}
\if{latex}{\out{\hypertarget{method-s3_object-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{s3_object$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
